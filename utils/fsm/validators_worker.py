"""Этот модуль предоставляет класс `ValidatorWorker`, который предназначен для управления валидаторами состояний.

Классы:

- `ValidatorWorker`: Класс, представляющий воркер для валидации состояний. Он содержит методы для присоединения валидаторов к состояниям и получения списка валидаторов. Класс имеет следующие методы:

  - `__init__(self)`: Конструктор класса, инициализирующий пустой словарь `validators`, который будет содержать информацию о присоединенных валидаторах.

  - `attach_validator(self, state)`: Метод-декоратор для присоединения валидатора к определенному состоянию. Принимает состояние `state` в качестве аргумента и возвращает декоратор. Декоратор принимает валидатор `validator` в качестве аргумента и добавляет его в словарь `validators` с ключом, соответствующим состоянию.

  - `get_validators(self)`: Метод для получения списка валидаторов. Возвращает словарь `validators`, содержащий присоединенные валидаторы в виде ключ-значение, где ключи - состояния, а значения - соответствующие валидаторы.

Параметры:

- `state`: Состояние, к которому присоединяется валидатор.

- `validator`: Валидатор, представленный в виде вызываемого объекта (callable).

Примечания:

- Класс `ValidatorWorker` предоставляет только механизм присоединения и получения валидаторов. Логика вызова валидаторов должна быть реализована отдельно в коде, который использует `ValidatorWorker`.

- Для присоединения валидатора к состоянию используется метод-декоратор `attach_validator`. Это облегчает синтаксис при добавлении валидаторов, пример использования:

  ```python
  worker = ValidatorWorker()

  @worker.attach_validator("state1")
  def validator1():
      # Логика валидации для состояния "state1"

  @worker.attach_validator("state2")
  def validator2():
      # Логика валидации для состояния "state2"
  ```

- Метод `get_validators` возвращает словарь `validators`, который может быть использован для выполнения валидации соответствующих состояний в произвольном коде, например:

  ```python
  for state, validator in worker.get_validators().items():
      if state == current_state:
          validator()  # Выполнение валидации для текущего состояния
  ```
"""

class ValidatorWorker:
    def __init__(self):
        self.validators = {}

    def attach_validator(self, state):
        def decorator(validator: callable):
            self.validators[state] = validator

        return decorator

    def get_validators(self):
        return self.validators
